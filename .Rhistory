library(educationdata)
df <- get_education_data(level = "school-districts",
source = "ccd",
topic = "directory",
filters = list(year = 2021))
View(df)
shiny::runApp('Desktop/MDI/NHSAdash')
runApp('Desktop/MDI/NHSAdash')
View(df)
sum(is.na(df(,c('latitude','longitude')))
sum(is.na(df[,c('latitude','longitude')]))
shiny::runApp('Desktop/MDI/NHSAdash')
shiny::runApp('Desktop/MDI/NHSAdash')
shiny::runApp('Desktop/MDI/NHSAdash')
shiny::runApp('Desktop/MDI/NHSAdash')
install.packages("sf")
install.packages("sf")
runApp('Desktop/MDI/NHSAdash')
shiny::runApp('Desktop/MDI/NHSAdash')
# install.packages('educationdata')
library(educationdata)
library(dplyr)
df <- get_education_data(level = "school-districts",
source = "ccd",
topic = "directory",
filters = list(year = 2021))
df$latitude <- jitter(df$latitude)
df$longitude <- jitter(df$longitude)
df$zip_location <- formatC(df$zip_location, width=5, format="d", flag="0")
# convert urban_centric_locale to string values
df <- df %>%
mutate(locale = case_when(
urban_centric_locale == 11 ~ "City-Large",
urban_centric_locale == 12 ~ "City-Midsize",
urban_centric_locale == 13 ~ "City-Small",
urban_centric_locale == 21 ~ "Suburb-Large",
urban_centric_locale == 22 ~ "Suburb-Midsize",
urban_centric_locale == 23 ~ "Suburb-Small",
urban_centric_locale == 31 ~ "Town-Fringe",
urban_centric_locale == 32 ~ "Town-Distant",
urban_centric_locale == 33 ~ "Town-Remote",
urban_centric_locale == 41 ~ "Rural-Fringe",
urban_centric_locale == 42 ~ "Rural-Distant",
urban_centric_locale == 43 ~ "Rural-Remote",
TRUE ~ NA_character_
))
df <- df[,c('lea_name','city_location','county_name','state_location',
'zip_location','locale','lowest_grade_offered','highest_grade_offered',
'number_of_schools','enrollment','teachers_total_fte','latitude','longitude')]
# add pop and household income
# install.packages("zipcodeR")
library(zipcodeR)
districts = merge(x = df, y = zip_code_db[,c('zipcode','population','median_household_income')],
by.x='zip_location', by.y='zipcode', all.x = TRUE)
cleantable <- districts %>%
dplyr::select(
Name = lea_name,
City = city_location,
County = county_name,
State = state_location,
Zipcode = zip_location,
Population = population,
Income = median_household_income,
Locale = locale,
LowestGrade = lowest_grade_offered,
HighestGrade = highest_grade_offered,
NumSchools = number_of_schools,
TotalEnrollment = enrollment,
TotalTeachers = teachers_total_fte,
Lat = latitude,
Long = longitude
)
aggregated_hs <- cleantable %>%
group_by(County, State) %>%
summarise(TotalPopulation = sum(Population),
TotalIncome = sum(Income),
TotalNumSchools = sum(NumSchools),
SumTotalEnrollment = sum(TotalEnrollment),
SumTotalTeachers = sum(TotalTeachers),
AllLocale = toString(unique(Locale)),
.groups = "drop")
library(sp)
library(sf)
library(dplyr)
library(leaflet)
library(scales)
# download county shape file from Tiger
us.map <- st_read(dsn = "./tl_2023_us_county", layer = "tl_2023_us_county")
us.map <- st_read(dsn = "./Desktop/MDI/NHSAdash/tl_2023_us_county", layer = "tl_2023_us_county")
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60)
# Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map <- us.map[!us.map$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69",
"64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map <- us.map[!us.map$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76",
"95", "79"),]
us.map <- us.map %>%
mutate(State = case_when(
STATEFP == "01" ~ "AL",
STATEFP == "04" ~ "AZ",
STATEFP == "05" ~ "AR",
STATEFP == "06" ~ "CA",
STATEFP == "08" ~ "CO",
STATEFP == "09" ~ "CT",
STATEFP == "10" ~ "DE",
STATEFP == "11" ~ "DC",
STATEFP == "12" ~ "FL",
STATEFP == "13" ~ "GA",
STATEFP == "16" ~ "ID",
STATEFP == "17" ~ "IL",
STATEFP == "18" ~ "IN",
STATEFP == "19" ~ "IA",
STATEFP == "20" ~ "KS",
STATEFP == "21" ~ "KY",
STATEFP == "22" ~ "LA",
STATEFP == "23" ~ "ME",
STATEFP == "24" ~ "MD",
STATEFP == "25" ~ "MA",
STATEFP == "26" ~ "MI",
STATEFP == "27" ~ "MN",
STATEFP == "28" ~ "MS",
STATEFP == "29" ~ "MO",
STATEFP == "30" ~ "MT",
STATEFP == "31" ~ "NE",
STATEFP == "32" ~ "NV",
STATEFP == "33" ~ "NH",
STATEFP == "34" ~ "NJ",
STATEFP == "35" ~ "NM",
STATEFP == "36" ~ "NY",
STATEFP == "37" ~ "NC",
STATEFP == "38" ~ "ND",
STATEFP == "39" ~ "OH",
STATEFP == "40" ~ "OK",
STATEFP == "41" ~ "OR",
STATEFP == "42" ~ "PA",
STATEFP == "43" ~ "PR",
STATEFP == "44" ~ "RI",
STATEFP == "45" ~ "SC",
STATEFP == "46" ~ "SD",
STATEFP == "47" ~ "TN",
STATEFP == "48" ~ "TX",
STATEFP == "49" ~ "UT",
STATEFP == "50" ~ "VT",
STATEFP == "51" ~ "VA",
STATEFP == "53" ~ "WA",
STATEFP == "54" ~ "WV",
STATEFP == "55" ~ "WI",
STATEFP == "56" ~ "WY",
TRUE ~ NA_character_
))
us.map <- us.map[,c('State','NAMELSAD','geometry')]
# Merge spatial df w aggregated data
merged_data <- left_join(us.map, aggregated_hs,
by = c("NAMELSAD" = "County", "State" = "State"))
merged_data <- st_transform(merged_data, 4326)
runApp('Desktop/MDI/NHSAdash')
shiny::runApp('Desktop/MDI/NHSAdash')
# library(devtools)
# devtools::install_github("sachit27/greenR", dependencies = TRUE)
library(greenR)
library(dplyr)
library(leaflet)
setwd("./Desktop/MDI/NHSAdash/")
source("get_green_data.R")
source("modified_visualizer.R")
virginia_green_data <- get_green_data("Washington, D.C., United States")$osm_polygons
virginia_green_data <- get_green_data("Washington, D.C., United States")$osm_polygons
virginia_green_data <- get_green_data("Washington, D.C., United States")$osm_polygons
greenR
virginia_green_data <- get_green_data("Washington, D.C., United States")$osm_polygons
virginia_green_data <- get_green_data("Washington, D.C., United States")$osm_polygons
virginia_green_data <- get_green_data("Washington, D.C., United States")$osm_polygons
modified_visualizer(virginia_green_data)
locations <- read.csv("va_counties.csv", header=F)$V1
for (location in locations) {
green_data <- get_green_data(location)
virginia_green_data <- bind_rows(virginia_green_data, green_data$osm_polygons)
}
modified_visualizer(virginia_green_data)
### initial data cleaning
library(educationdata)
library(dplyr)
df <- get_education_data(level = "school-districts",
source = "ccd",
topic = "directory",
filters = list(year = 2021))
df$latitude <- jitter(df$latitude)
df$longitude <- jitter(df$longitude)
df$zip_location <- formatC(df$zip_location, width=5, format="d", flag="0")
# row.names(df) <- df$zip_location # use diff than zips bc duplicate zips
# convert urban_centric_locale to string values
df <- df %>%
mutate(locale = case_when(
urban_centric_locale == 11 ~ "City-Large",
urban_centric_locale == 12 ~ "City-Midsize",
urban_centric_locale == 13 ~ "City-Small",
urban_centric_locale == 21 ~ "Suburb-Large",
urban_centric_locale == 22 ~ "Suburb-Midsize",
urban_centric_locale == 23 ~ "Suburb-Small",
urban_centric_locale == 31 ~ "Town-Fringe",
urban_centric_locale == 32 ~ "Town-Distant",
urban_centric_locale == 33 ~ "Town-Remote",
urban_centric_locale == 41 ~ "Rural-Fringe",
urban_centric_locale == 42 ~ "Rural-Distant",
urban_centric_locale == 43 ~ "Rural-Remote",
TRUE ~ NA_character_
))
df <- df[,c('lea_name','city_location','county_name','state_location',
'zip_location','locale','lowest_grade_offered','highest_grade_offered',
'number_of_schools','enrollment','teachers_total_fte','latitude','longitude')]
# add pop and household income
# install.packages("zipcodeR")
library(zipcodeR)
districts = merge(x = df, y = zip_code_db[,c('zipcode','population','median_household_income')],
by.x='zip_location', by.y='zipcode', all.x = TRUE)
cleantable <- districts %>%
dplyr::select(
Name = lea_name,
City = city_location,
County = county_name,
State = state_location,
Zipcode = zip_location,
Population = population,
Income = median_household_income,
Locale = locale,
LowestGrade = lowest_grade_offered,
HighestGrade = highest_grade_offered,
NumSchools = number_of_schools,
TotalEnrollment = enrollment,
TotalTeachers = teachers_total_fte,
Lat = latitude,
Long = longitude
)
#### Head Start locations merged by county ####
aggregated_hs <- cleantable %>%
group_by(County, State) %>%
summarise(TotalPopulation = sum(Population),
TotalIncome = sum(Income),
TotalNumSchools = sum(NumSchools),
SumTotalEnrollment = sum(TotalEnrollment),
SumTotalTeachers = sum(TotalTeachers),
AllLocale = toString(unique(Locale)),
.groups = "drop")
#### leaflet county map
library(sp)
library(sf)
library(scales)
### Begin data prep
# Download county shape file from Tiger.
# us.map <- st_read(dsn = "./Desktop/MDI/NHSAdash/tl_2023_us_county", layer = "tl_2023_us_county")
us.map <- st_read(dsn = "tl_2023_us_county", layer = "tl_2023_us_county")
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60)
#  Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map <- us.map[!us.map$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69",
"64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map <- us.map[!us.map$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76",
"95", "79"),]
us.map <- us.map %>%
mutate(State = case_when(
STATEFP == "01" ~ "AL",
STATEFP == "04" ~ "AZ",
STATEFP == "05" ~ "AR",
STATEFP == "06" ~ "CA",
STATEFP == "08" ~ "CO",
STATEFP == "09" ~ "CT",
STATEFP == "10" ~ "DE",
STATEFP == "11" ~ "DC",
STATEFP == "12" ~ "FL",
STATEFP == "13" ~ "GA",
STATEFP == "16" ~ "ID",
STATEFP == "17" ~ "IL",
STATEFP == "18" ~ "IN",
STATEFP == "19" ~ "IA",
STATEFP == "20" ~ "KS",
STATEFP == "21" ~ "KY",
STATEFP == "22" ~ "LA",
STATEFP == "23" ~ "ME",
STATEFP == "24" ~ "MD",
STATEFP == "25" ~ "MA",
STATEFP == "26" ~ "MI",
STATEFP == "27" ~ "MN",
STATEFP == "28" ~ "MS",
STATEFP == "29" ~ "MO",
STATEFP == "30" ~ "MT",
STATEFP == "31" ~ "NE",
STATEFP == "32" ~ "NV",
STATEFP == "33" ~ "NH",
STATEFP == "34" ~ "NJ",
STATEFP == "35" ~ "NM",
STATEFP == "36" ~ "NY",
STATEFP == "37" ~ "NC",
STATEFP == "38" ~ "ND",
STATEFP == "39" ~ "OH",
STATEFP == "40" ~ "OK",
STATEFP == "41" ~ "OR",
STATEFP == "42" ~ "PA",
STATEFP == "43" ~ "PR",
STATEFP == "44" ~ "RI",
STATEFP == "45" ~ "SC",
STATEFP == "46" ~ "SD",
STATEFP == "47" ~ "TN",
STATEFP == "48" ~ "TX",
STATEFP == "49" ~ "UT",
STATEFP == "50" ~ "VT",
STATEFP == "51" ~ "VA",
STATEFP == "53" ~ "WA",
STATEFP == "54" ~ "WV",
STATEFP == "55" ~ "WI",
STATEFP == "56" ~ "WY",
TRUE ~ NA_character_
))
us.map <- us.map[,c('State','NAMELSAD','geometry')]
# Merge spatial df with downloade ddata.
# leafmap <- merge(us.map, aggregated_hs, by=c("GEOID"))
#### merge
merged_data <- left_join(us.map, aggregated_hs,
by = c("NAMELSAD" = "County", "State" = "State"))
merged_data <- st_transform(merged_data, 4326)
# Format popup data for leaflet map.
popup_dat <- paste0("<strong>County: </strong>",
merged_data$NAMELSAD,
"<br><strong>Total Population: </strong>",
merged_data$TotalPopulation)
pal <- colorQuantile("YlOrRd", NULL, n = 9)
leaflet(data = merged_data) %>% addTiles() %>%
addPolygons(fillColor = ~pal(TotalPopulation),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)
runApp()
write.csv(virginia_green_data, file = "va_green_data_2.csv")
get_green_data("Norton, Virginia, 24273, United States")
get_green_data("Norton, Virginia, 24273, United States")
get_green_data("Norton, Virginia, 24273, United States")
get_green_data("Norton, Virginia, 24273, United States")
get_green_data("Norton, Virginia, 24273, United States")
source("get_green_data.R")
get_green_data("Norton, Virginia, 24273, United States")
source("get_green_data.R")
get_green_data("Norton, Virginia, 24273, United States")
source("get_green_data.R")
get_green_data("Norton, Virginia, 24273, United States")
source("get_green_data.R")
get_green_data("Norton, Virginia, 24273, United States")
test <- get_green_data("Norton, Virginia, 24273, United States")
!test
is.null(test)
is.null(test$osm_lines)
is.null(test$osm_polygons)
source("get_green_data.R")
test <- get_green_data("Norton, Virginia, 24273, United States")
is.null(test)
is.null(test$osm_polygons)
test
test$osm_polygons
class(test$osm_polygons)
type(test$osm_polygons)
typeof(test$osm_polygons)
nrow(test$osm_polygons)
source("get_green_data.R")
test <- get_green_data("Norton, Virginia, 24273, United States")
nrow(test$osm_polygons)
source("get_green_data.R")
test <- get_green_data("Accomack County, Virginia, United States")
test
View(test)
source("get_green_data.R")
test <- get_green_data("Norton, Virginia, 24273, United States")
test
test <- get_green_data("Accomack County, Virginia, United States")
test
norton <- get_green_data("Norton, Virginia, 24273, United States")
source("get_green_data.R")
norton <- get_green_data("Norton, Virginia, 24273, United States")
norton
test
test <- get_green_data("Accomack County, Virginia, United States")
test
norton
norton <- get_green_data("Norton, Virginia, 24273, United States")
norton
source("get_green_data")
source("get_green_data.R")
norton <- get_green_data("Norton, Virginia, 24273, United States")
norton
View(test)
View(norton)
norton$osm_polygons
nrow(norton$osm_polygons)
norton[1]
norton[1]$osm_polygons
norton[[1]]
norton[[1]]$osm_polygons
source("get_green_data.R")
norton <- get_green_data("Norton, Virginia, 24273, United States")
norton
View(norton)
norton[[1]]["osm_polygons"]
source("get_green_data.R")
norton <- get_green_data("Norton, Virginia, 24273, United States")
getElement(norton[[1]], "osm_polygons")
source("get_green_data.R")
norton <- get_green_data("Norton, Virginia, 24273, United States")
source("get_green_data.R")
norton <- get_green_data("Norton, Virginia, 24273, United States")
source("get_green_data.R")
norton <- get_green_data("Norton, Virginia, 24273, United States")
source("get_green_data.R")
norton <- get_green_data("Norton, Virginia, 24273, United States")
source("get_green_data.R")
norton <- get_green_data("Norton, Virginia, 24273, United States")
norton
norton <- get_green_data("Norton, Virginia, 24273, United States")
source("get_green_data.R")
norton <- get_green_data("Norton, Virginia, 24273, United States")
norton
source("get_green_data.R")
norton <- get_green_data("Norton, Virginia, 24273, United States")
norton
norton[6]
source("get_green_data.R")
norton <- get_green_data("Norton, Virginia, 24273, United States")
norton
test <- get_green_data("Accomack County, Virginia, United States")
test
modified_visualizer(test)
modified_visualizer(test$osm_polygons)
modified_visualizer(norton$osm_polygons)
virginia_green_data <- get_green_data("Washington, D.C., United States")$osm_polygons
locations <- read.csv("va_counties.csv", header=F)$V1
for (location in locations) {
green_data <- get_green_data(location)
virginia_green_data <- bind_rows(virginia_green_data, green_data$osm_polygons)
}
modified_visualizer(virginia_green_data)
write.csv(virginia_green_data, file = "va_green_data.csv")
va_green_data <- read.csv("va_green_data.csv", header = TRUE)
va_green_data <- read.csv("va_green_data.csv")
va_green_data <- read.csv("va_green_data.csv", header = F)
View(va_green_data)
View(virginia_green_data)
colnames(va_green_data) <- va_green_data[1, ]
va_green_data <- va_green_data[-1, ]
va_green_data <- data.frame(va_green_data[,-1], row.names = va_green_data[,1])
View(va_green_data)
va_green_data <- va_green_data[, -1]
View(va_green_data)
modified_visualizer(va_green_data)
View(va_green_data)
class(va_green_data)
class(virginia_green_data)
va_green_data_sf <- st_as_sf(va_green_data)
va_green_data_sf <- st_as_sf(va_green_data, sf_column_name = "geometry")
dim(va_green_data)
dim(virginia_green_data)
duplicated(va_green_data)
summary(virginia_green_data)
summary(va_green_data)
md_loc <- read.csv("md_counties.csv", header=F)$V1
for (county in md_loc) {
green_data <- get_green_data(location)
md_green_data <- bind_rows(all_green_data, green_data$osm_polygons)
}
for (county in md_loc) {
green_data <- get_green_data(location)
md_green_data <- bind_rows(md_green_data, green_data$osm_polygons)
}
md_green_data <- get_green_data("Allegany County, Maryland, United States")$osm_polygons
md_loc <- read.csv("md_counties.csv", header=F)$V1
for (county in md_loc) {
green_data <- get_green_data(location)
md_green_data <- bind_rows(md_green_data, green_data$osm_polygons)
}
source("modified_visualizer.R")
dmv_green_data <- bind_rows(virginia_green_data, md_green_data)
modifed_visualizer(dmv_green_data)
modified_visualizer(dmv_green_data)
source("modified_visualizer.R")
modified_visualizer(md_green_data)
runApp()
View(cleantable)
cleantable <- cleantable[-c(1, 2), ]
cleantable <- districts %>%
dplyr::select(
Name = lea_name,
City = city_location,
County = county_name,
State = state_location,
Zipcode = zip_location,
Population = population,
Income = median_household_income,
Locale = locale,
LowestGrade = lowest_grade_offered,
HighestGrade = highest_grade_offered,
NumSchools = number_of_schools,
TotalEnrollment = enrollment,
TotalTeachers = teachers_total_fte,
Lat = latitude,
Long = longitude
)
is.na(cleantable)
View(cleantable)
is.na(head(cleantable))
# cleantable <- cleantable[-c(1, 2), ] # remove first two null values
cleantable <- cleantable[!is.na(cleantable$Lat), , drop = FALSE]
View(cleantable)
View(aggregated_hs)
View(districts)
districts <- districts[!is.na(districts$latitude), , drop = FALSE] # remove null values
runApp()
